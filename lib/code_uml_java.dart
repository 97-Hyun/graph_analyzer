// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

// Auto-generated initialization code.

final ffi.Pointer<T> Function<T extends ffi.NativeType>(String sym) jniLookup =
    ProtectedJniExtensions.initGeneratedLibrary("code_uml_java");

/// from: dev.dart.CodeUmlJava
class CodeUmlJava extends jni.JObject {
  @override
  late final jni.JObjType<CodeUmlJava> $type = type;

  CodeUmlJava.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $CodeUmlJavaType();
  static final _ctor = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "CodeUmlJava__ctor")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory CodeUmlJava() {
    return CodeUmlJava.fromRef(_ctor().object);
  }

  static final _getSvg = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CodeUmlJava__getSvg")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.Object getSvg(java.lang.String text)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject getSvg(
    jni.JString text,
  ) {
    return const jni.JObjectType().fromRef(_getSvg(text.reference).object);
  }
}

class $CodeUmlJavaType extends jni.JObjType<CodeUmlJava> {
  const $CodeUmlJavaType();

  @override
  String get signature => r"Ldev/dart/CodeUmlJava;";

  @override
  CodeUmlJava fromRef(jni.JObjectPtr ref) => CodeUmlJava.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CodeUmlJavaType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CodeUmlJavaType) && other is $CodeUmlJavaType;
  }
}
