@startuml
class Logger {
-verboseMode: bool
---
+activateVerbose(): void
+error(): void
+info(): void
+success(): void
+regular(): void
}
class CodeUml {
+reporter: Reporter
+logger: Logger?
---
-_getFilePathsFromDir(): String[0..*]
+analyze(): void
-_analyzeClass(): ClassDef
-_analyzeMethod(): MethodDef
-_analyzeField(): FieldDef
-_analyzeDeps(): Set<String
-_isDep(): bool
-_isExcludedFile(): bool
}
CodeUml ..> Reporter
CodeUml ..> Logger
class MethodDef {
+name: String
+returnType: String
+isPrivate: bool
+isSetter: bool
+isGetter: bool
+isOperator: bool
---
}
class FieldDef {
+name: String
+type: String
+isPrivate: bool
---
+toString(): String
}
class MermaidUmlConverter {
+privateAccessModifier: null
+publicAccessModifier: null
---
+convertToText(): String
+convertDependencies(): String
+convertExtends(): String
+convertFields(): String
+convertImplements(): String
+convertMethods(): String
+convertStartClass(): String
+convertEndClass(): String
+«get»fileExtension(): String
+«get»methodsDivider(): String
}
Converter <|-- MermaidUmlConverter
class ReturnTypeConverter {
-returnType: String
---
+«get»inUml(): String
-_clearString(): String
}
class PlantUmlConverter {
-startText: null
-finishText: null
+privateAccessModifier: null
+publicAccessModifier: null
---
+convertToText(): String
+«get»fileExtension(): String
+convertMethods(): String
+convertFields(): String
+convertStartClass(): String
+convertEndClass(): String
+«get»methodsDivider(): String
+convertExtends(): String
+convertDependencies(): String
+convertImplements(): String
}
PlantUmlConverter ..|> Converter
abstract class Converter {
---
+create(): Converter
+«get»publicAccessModifier(): String
+«get»privateAccessModifier(): String
+«get»fileExtension(): String
+«get»methodsDivider(): String
+convertStartClass(): String
+convertEndClass(): String
+convertFields(): String
+convertMethods(): String
+convertToText(): String
+convertExtends(): String
+convertDependencies(): String
+convertImplements(): String
}
class ClassDef {
+fields: List<FieldDef>
+methods: List<MethodDef>
+deps: Set<String>
+implementsOf: Set<String>
+name: String
+extendsOf: String?
+isAbstract: bool
---
}
abstract class Reporter {
---
+create(): Reporter
+report(): void
}
class _FileReporter {
+converter: Converter
+reportDirPath: String
---
+report(): void
}
_FileReporter ..> Converter
_FileReporter ..|> Reporter
@enduml